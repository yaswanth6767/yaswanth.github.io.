{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"4.4.0"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30749,"isInternetEnabled":true,"language":"r","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/yaswanthkrishna7799/notebookc9cfa6a469?scriptVersionId=243319976\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This R environment comes with many helpful analytics packages installed\n# It is defined by the kaggle/rstats Docker image: https://github.com/kaggle/docker-rstats\n# For example, here's a helpful package to load\n\nlibrary(tidyverse) # metapackage of all tidyverse packages\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nlist.files(path = \"../input\")\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","trusted":true,"execution":{"iopub.status.busy":"2025-06-02T22:05:53.330892Z","iopub.execute_input":"2025-06-02T22:05:53.335076Z","iopub.status.idle":"2025-06-02T22:05:54.826787Z","shell.execute_reply":"2025-06-02T22:05:54.824871Z"}},"outputs":[{"name":"stderr","text":"── \u001b[1mAttaching core tidyverse packages\u001b[22m ──────────────────────── tidyverse 2.0.0 ──\n\u001b[32m✔\u001b[39m \u001b[34mdplyr    \u001b[39m 1.1.4     \u001b[32m✔\u001b[39m \u001b[34mreadr    \u001b[39m 2.1.5\n\u001b[32m✔\u001b[39m \u001b[34mforcats  \u001b[39m 1.0.0     \u001b[32m✔\u001b[39m \u001b[34mstringr  \u001b[39m 1.5.1\n\u001b[32m✔\u001b[39m \u001b[34mggplot2  \u001b[39m 3.5.1     \u001b[32m✔\u001b[39m \u001b[34mtibble   \u001b[39m 3.2.1\n\u001b[32m✔\u001b[39m \u001b[34mlubridate\u001b[39m 1.9.3     \u001b[32m✔\u001b[39m \u001b[34mtidyr    \u001b[39m 1.3.1\n\u001b[32m✔\u001b[39m \u001b[34mpurrr    \u001b[39m 1.0.2     \n── \u001b[1mConflicts\u001b[22m ────────────────────────────────────────── tidyverse_conflicts() ──\n\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mfilter()\u001b[39m masks \u001b[34mstats\u001b[39m::filter()\n\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mlag()\u001b[39m    masks \u001b[34mstats\u001b[39m::lag()\n\u001b[36mℹ\u001b[39m Use the conflicted package (\u001b[3m\u001b[34m<http://conflicted.r-lib.org/>\u001b[39m\u001b[23m) to force all conflicts to become errors\n","output_type":"stream"},{"output_type":"display_data","data":{"text/html":"","text/markdown":"","text/latex":"","text/plain":"character(0)"},"metadata":{}}],"execution_count":1},{"cell_type":"code","source":"# Load necessary libraries\nlibrary(tidyverse)\nlibrary(lubridate)\n\n# Step 1: Load the dataset\ndf_2020 <- read.csv(\"C:/Users/yaswa/Documents/New folder/RESUME/Divvy_Trips_2020_Q1.csv\", stringsAsFactors = FALSE)\n\n# Step 2: Print column names to verify\nprint(colnames(df_2020))  # Find the correct date column\n\n# Step 3: Convert timestamps to datetime format\ndf_2020$started_at <- as.POSIXct(df_2020$started_at, format=\"%Y-%m-%d %H:%M:%S\")\ndf_2020$ended_at <- as.POSIXct(df_2020$ended_at, format=\"%Y-%m-%d %H:%M:%S\")\n\n# Step 4: Calculate ride duration in minutes\ndf_2020$ride_duration <- as.numeric(difftime(df_2020$ended_at, df_2020$started_at, units=\"mins\"))\n\n# Step 5: Extract day of the week and hour of the day\ndf_2020$day_of_week <- weekdays(df_2020$started_at)\ndf_2020$hour_of_day <- hour(df_2020$started_at)\n\n# Step 6: Remove negative or zero-duration rides\ndf_2020 <- df_2020 %>% filter(ride_duration > 0)\n\n# Step 7: Summary statistics\nsummary(df_2020)\n\n# Step 8: Plot Ride Duration by User Type\nggplot(df_2020, aes(x=member_casual, y=ride_duration, fill=member_casual)) +\n  geom_bar(stat=\"summary\", fun=\"mean\") +\n  labs(title=\"Average Ride Duration by User Type\", x=\"User Type\", y=\"Ride Duration (minutes)\") +\n  theme_minimal()\n\n# Step 9: Ride Count by Day of the Week\nride_counts <- df_2020 %>% group_by(day_of_week, member_casual) %>% summarise(count = n())\n\nggplot(ride_counts, aes(x=day_of_week, y=count, fill=member_casual)) +\n  geom_bar(stat=\"identity\", position=\"dodge\") +\n  labs(title=\"Ride Count by Day of the Week\", x=\"Day of the Week\", y=\"Ride Count\") +\n  theme_minimal()\n\n# Step 10: Ride Count by Hour of the Day\nhourly_counts <- df_2020 %>% group_by(hour_of_day, member_casual) %>% summarise(count = n())\n\nggplot(hourly_counts, aes(x=hour_of_day, y=count, color=member_casual)) +\n  geom_line(size=1) +\n  labs(title=\"Ride Count by Hour of the Day\", x=\"Hour of Day\", y=\"Ride Count\") +\n  theme_minimal()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-11T22:57:50.552356Z","iopub.execute_input":"2025-02-11T22:57:50.554379Z","iopub.status.idle":"2025-02-11T22:57:52.032285Z","shell.execute_reply":"2025-02-11T22:57:52.027054Z"}},"outputs":[{"name":"stderr","text":"── \u001b[1mAttaching core tidyverse packages\u001b[22m ──────────────────────── tidyverse 2.0.0 ──\n\u001b[32m✔\u001b[39m \u001b[34mdplyr    \u001b[39m 1.1.4     \u001b[32m✔\u001b[39m \u001b[34mreadr    \u001b[39m 2.1.5\n\u001b[32m✔\u001b[39m \u001b[34mforcats  \u001b[39m 1.0.0     \u001b[32m✔\u001b[39m \u001b[34mstringr  \u001b[39m 1.5.1\n\u001b[32m✔\u001b[39m \u001b[34mggplot2  \u001b[39m 3.5.1     \u001b[32m✔\u001b[39m \u001b[34mtibble   \u001b[39m 3.2.1\n\u001b[32m✔\u001b[39m \u001b[34mlubridate\u001b[39m 1.9.3     \u001b[32m✔\u001b[39m \u001b[34mtidyr    \u001b[39m 1.3.1\n\u001b[32m✔\u001b[39m \u001b[34mpurrr    \u001b[39m 1.0.2     \n── \u001b[1mConflicts\u001b[22m ────────────────────────────────────────── tidyverse_conflicts() ──\n\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mfilter()\u001b[39m masks \u001b[34mstats\u001b[39m::filter()\n\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mlag()\u001b[39m    masks \u001b[34mstats\u001b[39m::lag()\n\u001b[36mℹ\u001b[39m Use the conflicted package (\u001b[3m\u001b[34m<http://conflicted.r-lib.org/>\u001b[39m\u001b[23m) to force all conflicts to become errors\nWarning message in file(file, \"rt\"):\n“cannot open file 'C:/Users/yaswa/Documents/New folder/RESUME/Divvy_Trips_2020_Q1.csv': No such file or directory”\n","output_type":"stream"},{"ename":"ERROR","evalue":"Error in file(file, \"rt\"): cannot open the connection\n","traceback":["Error in file(file, \"rt\"): cannot open the connection\nTraceback:\n","1. read.csv(\"C:/Users/yaswa/Documents/New folder/RESUME/Divvy_Trips_2020_Q1.csv\", \n .     stringsAsFactors = FALSE)","2. read.table(file = file, header = header, sep = sep, quote = quote, \n .     dec = dec, fill = fill, comment.char = comment.char, ...)","3. file(file, \"rt\")"],"output_type":"error"}],"execution_count":1},{"cell_type":"code","source":"# Load necessary libraries\nlibrary(tidyverse)\nlibrary(lubridate)\n\n# Step 1: Extract the ZIP file\nunzip(\"C:/Users/yaswa/Downloads/archive.zip\", exdir = \"C:/Users/yaswa/Downloads/extracted_data\")\n\n# Step 2: Load the extracted CSV file (daily activity data)\ndaily_activity <- read.csv(\"C:/Users/yaswa/Documents/New folder/RESUME/dailyActivity_merged.csv\", stringsAsFactors = FALSE)\n\n# Step 3: Print column names to identify the correct date column\nprint(colnames(daily_activity))\n\n  # Step 5: Convert to Date format\ndaily_activity$ActivityDate <- as.Date(daily_activity$ActivityDate, format=\"%m/%d/%Y\")\n\n# Debugging: Check if conversion was successful\nprint(head(daily_activity$ActivityDate))\n\n# Step 6: Summary statistics of key columns\nsummary(daily_activity)\n\n# Step 7: Plot Daily Steps vs. Calories Burned\nggplot(daily_activity, aes(x=TotalSteps, y=Calories)) +\n  geom_point(alpha=0.5, color=\"blue\") +\n  geom_smooth(method=\"lm\", color=\"red\") +\n  labs(title=\"Daily Steps vs. Calories Burned\", x=\"Total Steps\", y=\"Calories Burned\") +\n  theme_minimal()\n\n# Step 8: Analyze Sleep Data (if available)\nsleep_data <- read.csv(\"C:/Users/yaswa/Documents/New folder/RESUME/sleepDay_merged.csv\", stringsAsFactors = FALSE)\n\n# Convert sleep date column to Date format\nsleep_data$SleepDay <- as.Date(sleep_data$SleepDay, format=\"%m/%d/%Y\")\n\n# Plot Sleep Trends\navg_sleep <- mean(sleep_data$TotalMinutesAsleep, na.rm=TRUE)  # Calculate average sleep\n\nggplot(sleep_data, aes(x=SleepDay, y=TotalMinutesAsleep)) +\n  geom_line(color=\"purple\", linewidth=1, alpha=0.6) +\n  geom_smooth(method=\"loess\", color=\"red\", linetype=\"dashed\", se=FALSE) +\n  geom_hline(yintercept=avg_sleep, linetype=\"dotted\", color=\"blue\") +  # Average sleep line\n  annotate(\"text\", x=min(sleep_data$SleepDay), y=avg_sleep + 20, \n           label=paste(\"Avg Sleep:\", round(avg_sleep, 1), \"mins\"), color=\"blue\", hjust=0) +\n  labs(title=\"Sleep Duration Trends (Final Version)\", x=\"Date\", y=\"Minutes Asleep\") +\n  scale_x_date(date_breaks=\"5 days\", date_labels=\"%b %d\") +\n  theme_minimal()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-11T23:01:11.286806Z","iopub.execute_input":"2025-02-11T23:01:11.288715Z","iopub.status.idle":"2025-02-11T23:01:11.352139Z","shell.execute_reply":"2025-02-11T23:01:11.341073Z"}},"outputs":[{"name":"stderr","text":"Warning message in unzip(\"C:/Users/yaswa/Downloads/archive.zip\", exdir = \"C:/Users/yaswa/Downloads/extracted_data\"):\n“error 1 in extracting from zip file”\nWarning message in file(file, \"rt\"):\n“cannot open file 'C:/Users/yaswa/Documents/New folder/RESUME/dailyActivity_merged.csv': No such file or directory”\n","output_type":"stream"},{"ename":"ERROR","evalue":"Error in file(file, \"rt\"): cannot open the connection\n","traceback":["Error in file(file, \"rt\"): cannot open the connection\nTraceback:\n","1. read.csv(\"C:/Users/yaswa/Documents/New folder/RESUME/dailyActivity_merged.csv\", \n .     stringsAsFactors = FALSE)","2. read.table(file = file, header = header, sep = sep, quote = quote, \n .     dec = dec, fill = fill, comment.char = comment.char, ...)","3. file(file, \"rt\")"],"output_type":"error"}],"execution_count":4},{"cell_type":"code","source":"# Load necessary libraries\nlibrary(tidyverse)\nlibrary(stringr)\n\n# Load cleaned dataset\namazon_data <- read.csv(\"C:/Users/yaswa/Documents/New folder/RESUME/amazon.csv\", stringsAsFactors = FALSE)\n\n# Step 1: Clean and Convert Data Types\n# Remove currency symbols and convert to numeric\namazon_data$discounted_price <- as.numeric(gsub(\"[^0-9]\", \"\", amazon_data$discounted_price))\namazon_data$actual_price <- as.numeric(gsub(\"[^0-9]\", \"\", amazon_data$actual_price))\namazon_data$discount_percentage <- as.numeric(gsub(\"%\", \"\", amazon_data$discount_percentage))\namazon_data$rating <- as.numeric(amazon_data$rating)\namazon_data$rating_count <- as.numeric(gsub(\",\", \"\", amazon_data$rating_count))  # Remove commas in review counts\n\n# Step 2: Remove Missing Values\namazon_data <- amazon_data %>% drop_na(discount_percentage, rating, rating_count)\n\n# Step 3: Correlation Between Discount Percentage and Ratings\nggplot(amazon_data, aes(x=discount_percentage, y=rating)) +\n  geom_point(alpha=0.5, color=\"blue\") +\n  geom_smooth(method=\"lm\", color=\"red\") +\n  labs(title=\"Discount Percentage vs. Product Ratings\", x=\"Discount Percentage\", y=\"Average Rating\") +\n  theme_minimal()\n\n# Step 4: Discount Percentage vs. Popularity (Review Count)\nggplot(amazon_data, aes(x=discount_percentage, y=rating_count)) +\n  geom_point(alpha=0.5, color=\"green\") +\n  geom_smooth(method=\"lm\", color=\"red\") +\n  labs(title=\"Discount Percentage vs. Review Count\", x=\"Discount Percentage\", y=\"Number of Reviews\") +\n  theme_minimal()\n\n# Step 5: Improved Visualization for Top 10 Categories with Highest Discounts\ncategory_discount <- amazon_data %>%\n  group_by(category) %>%\n  summarise(avg_discount = mean(discount_percentage, na.rm = TRUE)) %>%\n  arrange(desc(avg_discount)) %>%\n  slice_head(n = 10)  # Show only top 10 categories\n\n# Simplify category names by extracting the last part after the last \"|\"\ncategory_discount$category <- sapply(strsplit(category_discount$category, \"\\\\|\"), function(x) tail(x, 1))\n\nggplot(category_discount, aes(x=reorder(category, avg_discount), y=avg_discount, fill=category)) +\n  geom_bar(stat=\"identity\") +\n  coord_flip() +\n  labs(title=\"Top 10 Categories by Average Discount\", x=\"Product Category\", y=\"Average Discount Percentage\") +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 12),  # Adjust overall text size\n    axis.text.y = element_text(size = 10),  # Increase y-axis label size\n    plot.title = element_text(hjust = 0.5),  # Center the title\n    legend.position = \"none\"\n  ) +\n  scale_x_discrete(labels = function(x) str_wrap(x, width = 20))  # Improved wrapping width","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-11T23:02:03.249703Z","iopub.execute_input":"2025-02-11T23:02:03.251486Z","iopub.status.idle":"2025-02-11T23:02:03.288029Z","shell.execute_reply":"2025-02-11T23:02:03.285919Z"}},"outputs":[{"name":"stderr","text":"Warning message in file(file, \"rt\"):\n“cannot open file 'C:/Users/yaswa/Documents/New folder/RESUME/amazon.csv': No such file or directory”\n","output_type":"stream"},{"ename":"ERROR","evalue":"Error in file(file, \"rt\"): cannot open the connection\n","traceback":["Error in file(file, \"rt\"): cannot open the connection\nTraceback:\n","1. read.csv(\"C:/Users/yaswa/Documents/New folder/RESUME/amazon.csv\", \n .     stringsAsFactors = FALSE)","2. read.table(file = file, header = header, sep = sep, quote = quote, \n .     dec = dec, fill = fill, comment.char = comment.char, ...)","3. file(file, \"rt\")"],"output_type":"error"}],"execution_count":5},{"cell_type":"markdown","source":"","metadata":{}}]}